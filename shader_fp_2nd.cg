////////////////////////////////////////////////////////////////////
//
// $Id: shader_fp_2nd.cg 2021/06/05 12:48:16 kanai Exp $
//
// fragment program for blending q
//
// Copyright (c) 2021 Takashi Kanai
// Released under the MIT license
//
////////////////////////////////////////////////////////////////////

#include "mydefine.h"

void main( in float4 hPos : POSITION,      // pixel position (but it can not be used ...)
   	   in float4 texCoord : TEXCOORD0, // from point sprite
  	   in float4 pPos : TEXCOORD1,     // pixel position from vertex program
  	   in float4 ref_functex : TEXCOORD2, // floating-point texture coordinate
	   uniform float4 viewParam,
	   uniform float drawMode,
	   uniform samplerRECT polyParam,
	   uniform samplerRECT gaussKernel,
	   uniform samplerRECT qhatT,
	   uniform float4x4 ModelViewInv,
 	   uniform float4x4 ModelViewProjInv,
	   out float4 position : COLOR0,
	   out float4 normal   : COLOR1
	   )
{
  //
  // fetch function parameters from a texture
  //
  float tex_x = round( ref_functex.x * FID_DIV );
  float tex_y = round( ref_functex.y * FID_DIV );

  // centerX, centerY, centerZ, support
  float4 param0 = texRECT( polyParam, float2( tex_x  , tex_y ) );
  
  // cXX, cYY, cZZ, .0f
  float4 param1 = texRECT( polyParam, float2( tex_x+1, tex_y ) );
  // cXY, cYZ, cZX, .0f
  float4 param2 = texRECT( polyParam, float2( tex_x+2, tex_y ) );
  // cX, cY, cZ, c0
  float4 param3 = texRECT( polyParam, float2( tex_x+3, tex_y ) );

  float4 center = float4( param0.xyz, 1.0f );

  // compute q_o (q in object space) and e_o (eye in object space)
  float4 qo;
  if ( drawMode == DRAW_BILLBOARD )
    qo = mul( ModelViewProjInv, pPos ) - center;
  else
    {
      float4 qn = float4( 2.0f * ( texCoord.x - .5f ) * (ref_functex.z) + pPos.x,
			  -2.0f * ( texCoord.y - .5f ) * (ref_functex.z) + pPos.y,
			  pPos.z, 
			  pPos.w );
      qo = mul( ModelViewProjInv, qn ) - center;
    }

  float4 eo = mul( ModelViewInv, float4( .0f, .0f, .0f, 1.0f ) ) - center;

  // ray: x = eo + t * p
  float4 p = qo - eo;
  
  // compute two intersection points qp and qm between a ray and a quadtic surface
  //  At^2 + Bt + C = 0
  float A = ( param1.x * p.x * p.x + 
	      param1.y * p.y * p.y + 
	      param1.z * p.z * p.z + 
	      param2.x * p.x * p.y + 
	      param2.y * p.y * p.z + 
	      param2.z * p.z * p.x );
  float B = ( 2.0f * param1.x * p.x * eo.x + 
	      2.0f * param1.y * p.y * eo.y + 
	      2.0f * param1.z * p.z * eo.z + 
	      param2.x * (p.x * eo.y + p.y * eo.x) + 
	      param2.y * (p.y * eo.z + p.z * eo.y) + 
	      param2.z * (p.z * eo.x + p.x * eo.z) + 
	      param3.x * p.x + 
	      param3.y * p.y + 
	      param3.z * p.z );
  float C = ( param1.x * eo.x * eo.x + 
	      param1.y * eo.y * eo.y + 
	      param1.z * eo.z * eo.z + 
	      param2.x * eo.x * eo.y + 
	      param2.y * eo.y * eo.z + 
	      param2.z * eo.z * eo.x +
	      param3.x * eo.x + 
	      param3.y * eo.y + 
	      param3.z * eo.z + 
	      param3.w );


  float tmp0 = B*B - 4.0f * A * C;
  if ( tmp0 >= 0.0f )
    {
      float tmp = sqrt( tmp0 );
      float tmpq = -.5f * (B + sign(B) * tmp);
      float tp = tmpq / A;
      float tm = C / tmpq;
      float4 qp = eo + p * tp + center;
      float4 qm = eo + p * tm + center;

      float disp = distance( qp.xyz, center.xyz );
      float dism = distance( qm.xyz, center.xyz );

      // support size in the second pass is 1.5 times larger
      // than that in the first pass.
      float rad = param0.w * 1.5f;

      // pick up a point closer to a center point of a sphere
      float4 q;
      if ( (disp < rad) && (dism < rad) )
	{
	  float edisp = distance( qp.xyz, eo.xyz+center.xyz );
	  float edism = distance( qm.xyz, eo.xyz+center.xyz );
	  if ( edisp < edism ) q = qp;
	  else                 q = qm;
	}
      else if (disp < rad)
	{
	  q = qp;
	}
      else if (dism < rad) 
	{
	  q = qm;
	}
      else
	{
 	  discard;
	}

      // get current pixel position on window space
      float2 wPos;
      wPos.x = pPos.x / pPos.w;
      wPos.y = pPos.y / pPos.w;
      wPos.x = round(viewParam[0]+(1.0f+wPos.x)*viewParam[2]/2.0f - .5f);
      wPos.y = round(viewParam[1]+(1.0f+wPos.y)*viewParam[3]/2.0f - .5f);
      
      // fetch qhat using wPos
      float4 qhat = texRECT( qhatT, wPos );
     
      float G = .0f;
      if ( distance( center.xyz, qhat.xyz ) < rad )
	{
	  // compute Gaussian function
	  float d = distance( q.xyz, center.xyz ) / rad;

	  //
	  // G = .0f if d > 1.0f
	  //
	  if ( d <= 1.0f )
	    {
	      G = texRECT( gaussKernel, float2( d * GAUSS_WIDTH, 0 ) ).x;
	    }
	  else
	    G = .0f;

#if 0
	  if ( d < .5f )
	    {
	      G = - d * d + .75f;
	    }
	  else if ( (d >= .5f) && (d <= 1.0f) )
	    {
	      G = 0.5f * (1.5f - d) * (1.5f - d);
	    }
	  else
	    {
	      G = .0f;
	    }
#endif
	}
      else
	{
	  discard;
	}

      // compute a gradient
      float4 qs = q - center;
      float gradx = 2.0f * param1.x * qs.x + param2.x * qs.y + param2.z * qs.z + param3.x;
      float grady = 2.0f * param1.y * qs.y + param2.x * qs.x + param2.y * qs.z + param3.y;
      float gradz = 2.0f * param1.z * qs.z + param2.y * qs.y + param2.z * qs.x + param3.z;
      float3 nrm3 = float3( gradx, grady, gradz );

      // backface culling
#if 1
      if ( dot( p.xyz, nrm3 ) > .0f )
	{
	  discard;
	}
#endif

       position = float4( G * q.x, G * q.y, G * q.z, G );
       normal   = float4( G * nrm3.x, G * nrm3.y, G * nrm3.z, G );
//        position = float4( q.x, q.y, q.z, G );
//        normal   = float4( nrm3.x, nrm3.y, nrm3.z, G );
    }
  else
    {
      discard;
    }
}
